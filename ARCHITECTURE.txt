Grundideen zur Architektur.
---------------------------

not intended for publishing, therefore language is german, sorry.
nicht zum Weitergeben gedacht, daher in deutsch.

Entity Syntax:
  Entity;
  Entity 'name';
  Entity 'name', arg1 => 'v1', ...;
  Entity name => { ... args ... };
  Entity { ... args ... };


Bestandteile:
 (+: attribut, -: methode, *: Klasse, !: Rolle, !!: Trait)

 * Script::Provision            remote laufendes script
 * DSL                          erzeugt pro Source/Entity eine sub
 * App                          zentrale Ablaufsteuerung
    ----[ logging ]
    ----[ entity creation + caching ]
    ----[ command execution ]
 * Base                         Basisklasse constructor, name-handling
 * Command                      Kommando-Ausführung mittels IPC::Run3
 * Entity                       Basisklasse von Entities
    ! App
    ! User
    + parent: Entity | unset
    + children
    - add_child(), add_children()
    - nr_children()
    - all_children()
    - has_no_children()
    
    + state: missing | outdated | current
    + default_state: missing | outdated | current
    - add_to_state()
    
    + need_privilege
    
    + wanted
    - install()
    - is_ok()
    
    + inspector
    + inspector_class
    + inspector_instance
    - inspect()
    
    + installer
    + installer_class
    + installer_instance
    - create()
    - change()
    - remove()

 * Inspector
    ! Entity
    
 * Installer
    ! Entity
    ! CommandExecution
    
 * Role
    * App                       App handling und delegation
    * CommandExecution          Befehle ausführen diverse Variationen
    * CommandlineOptions        @ARGV handling
    * Entity                    entity-Attribut
    * HTTP                      http_get() Methode
    * ProcessControl            pid_file-Attribut und pid() Methode
    * User                      user, group ...
    
 * Source                       Basisklasse von Datenquellen
      + name: Str
      + content: Str
    * Bin                       Binary unter /bin im .tar Archiv
    * Resource
        + root_dir: ExistingDir
        + path: File | Dir
      * Template
          + vars: HashRef
    * Url
        + url

  * Types                       to_Type() coercions, Type() checks

  * Util                        various utilities



Einbindung von Inspektoren/Installern:
 - 1) bisher implementiert:
      inspector => 'SomeInspector'
      inspector => [SomeInspector => ...]

 - 2) besser:
      inspector => SomeInspector( ... )

    für jede gefundene Inspector-Klasse passend zur Platform muß
    erzeugt und exportiert werden:

    sub SomeInspector {
        [ to_Class('Provision::DSL::Inspector')->('SomeInspector'), @_ ];
    }
    
    in Entity gibt es dann nur noch 'inspector', 'inspector_instance'
    
    Beispiele:
      inspector => Always,
      inspector => ProcessAge(Files('*.jpg')),
    
    