Grundideen zur Architektur.
---------------------------

not intended for publishing, therefore language is german, sorry.
nicht zum Weitergeben gedacht, daher in deutsch.

Entity Syntax:
  Entity;
  Entity 'name';
  Entity 'name', arg1 => 'v1', ...;
  Entity name => { ... args ... };
  Entity { ... args ... };


Bestandteile:
 (attribut, methode(), >: extends, +: Rolle)

 * Script::Provision            remote laufendes script
 * DSL                          erzeugt pro Source/Entity eine sub
 * App                          zentrale Ablaufsteuerung
    ----[ logging ]
    ----[ entity creation + caching ]
    ----[ command execution ]
 * Base                         Basisklasse constructor, name-handling
    name
 * Command                      Kommando-Ausführung mittels IPC::Run3
 * Entity > Base+App+User        Basisklasse von Entities
    parent: Entity | unset
    children
    add_child(), add_children()
    nr_children()
    all_children()
    has_no_child(), has_no_children()
    
    state: missing | outdated | current # may fail
    default_state: missing | outdated | current
    add_to_state()
    
    need_privilege # may fail
    
    wanted
    install() # may fail
    is_ok()  # may fail
    create() # may fail
    change() # may fail
    remove() # may fail
    
    inspector               // additional inspector
    inspector_instance
    inspect() # may fail
    
    installer               // alternate/additional installer ???
    installer_instance
    
    source                  // a Url, File, Dir, ...
    source_instance

 * Inspector +Entity
    
 * Installer +Entity,CommandExecution
    
 * Role
    * App                       App handling und delegation
    * CommandExecution          Befehle ausführen diverse Variationen
    * CommandlineOptions        @ARGV handling
    * Entity                    entity-Attribut
    * HTTP                      http_get() Methode
    * ProcessControl            pid_file-Attribut und pid() Methode
    * User                      user, group ...
    
 * Source > Base                Basisklasse von Datenquellen
      content: Str
    * Bin                       Binary unter /bin im .tar Archiv
    * Resource
        + root_dir: ExistingDir
        + path: File | Dir
      * Template
          + vars: HashRef
    * Url
        + url

  * Types                       to_Type() coercions, Type() checks

  * Util                        various utilities



Einbindung von Inspektoren/Installern:
    inspector => SomeInspector( ... ), ...
    inspector => SomeInspector, ...

    für jede gefundene Inspector-Klasse passend zur Platform muß
    erzeugt und exportiert werden:

    sub SomeInspector { return [ 'P::D::I::Xxx', { @_ } ] }
    
    in Entity gibt es dann nur noch 'inspector', 'inspector_instance'
    
    Beispiele:
      inspector => Always,
      inspector => ProcessAge('*.jpg'),
    

-- Idee zu Inspectors. Jeder Inspector bekommt einen Array als Argumente.
-- braucht File::Zglob

DirExists('/some/dir', '/other_dir')    exists: current, sonst: outdated/missing
FileExists('/lib/**/*.ext')
LinkExists('/some/link')

PathAge('file', 'file*',)               älter: outdated, sonst: current/missing
  -- vergleich $self->path->mtime

ProcessAge('file')
  -- vergleich $self->started

ScriptSuccess('file', 'arg1', 'arg2')  exit 0: current, sonst: outdated

-- beim Instantiieren:
Some::Inspector->new( ..., expected_value => [ ... ] );


Ablauf eines Provisioning Scripts
 * DSL "installieren", d.h. Schlüsselworte definieren
    * Entity    : sub { app->create_entity(P::D::Entity::xxx)->install }
    * Source    : sub { "P::D::Source::xxx"->new(@_) }
          evtl:         +[ "P::D::Inspector::xxx", @_ ]
    * Inspector : sub { +[ "P::D::Inspector::xxx", @_ ] }
    * Installer : sub { +[ "P::D::Installer::xxx", @_ ] }
 * jeden einzelnen Befehl "laufen" lassen


Ablauf eines Provisioning Vorganges
 * Lokal: Module sammeln
 * Lokal: Resourcen sammeln
 * Lokal: rsyncd starten
 * ssh <hole script>, <hole module und recourcen>, starte script, kopiere logs
 * Lokal: rsyncd stop

