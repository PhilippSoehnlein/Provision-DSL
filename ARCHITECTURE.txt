Grundideen zur Architektur.
---------------------------

not intended for publishing, therefore language is german, sorry.
nicht zum Weitergeben gedacht, daher in deutsch.

Entity Syntax:
  Entity;
  Entity 'name';
  Entity 'name', arg1 => 'v1', ...;
  Entity name => { ... args ... };
  Entity { ... args ... };


Bestandteile:
 (+: attribut, -: methode, *: Klasse, !: Rolle, !!: Trait)

 * Script::Provision            remote laufendes script
 * DSL                          erzeugt pro Source/Entity eine sub
 * App                          zentrale Ablaufsteuerung
    ----[ logging ]
    ----[ entity creation + caching ]
    ----[ command execution ]
 * Base                         Basisklasse constructor, name-handling
 * Command                      Kommando-Ausführung mittels IPC::Run3
 * Entity                       Basisklasse von Entities
    ! App
    ! User
    + parent: Entity | unset
    + children
    - add_child(), add_children()
    - nr_children()
    - all_children()
    - has_no_children()
    
    + state: missing | outdated | current
    + default_state: missing | outdated | current
    - add_to_state()
    
    + need_privilege
    
    + wanted
    - install()
    - is_ok()
    
    + inspector
    + inspector_class
    + inspector_instance
    - inspect()
    
    + installer
    + installer_class
    + installer_instance
    - create()
    - change()
    - remove()

 * Inspector
    ! Entity
    
 * Installer
    ! Entity
    ! CommandExecution
    
 * Role
    * App                       App handling und delegation
    * CommandExecution          Befehle ausführen diverse Variationen
    * CommandlineOptions        @ARGV handling
    * Entity                    entity-Attribut
    * HTTP                      http_get() Methode
    * ProcessControl            pid_file-Attribut und pid() Methode
    * User                      user, group ...
    
 * Source                       Basisklasse von Datenquellen
      + name: Str
      + content: Str
    * Bin                       Binary unter /bin im .tar Archiv
    * Resource
        + root_dir: ExistingDir
        + path: File | Dir
      * Template
          + vars: HashRef
    * Url
        + url

  * Types                       to_Type() coercions, Type() checks

  * Util                        various utilities


Datenstruktur zum Deployment (gepackt als .tar.gz):

/
  provision.pl              -- standard provision Datei
  local/
    bin/                    -- evtl. ein paar vorbereitete Binärdateien
      cpanm
      perlbrew
    etc/                    -- evtl. Konfigurations-Dateien
    lib/                    -- alle benötigten Bibliotheken
  resources/                -- Resource-Dateien



Vorbereitung eines Provision Vorganges:

 - auf dem Entwicklungs-Rechner
    * leeres Temp-Verzeichnis anlegen ($DIR)
    * via cpanm: Provision::DSL und Abhängigkeiten installieren
      dürfen nur Pure-Perl Module sein!
      --> derzeit ca. 50 pm-Dateien zuzüglich Provision::DSL
      --> ca. 1,5 MB
    * evtl. Konfigurations-Datei(en) nach $DIR/etc kopieren
    * rsyncd starten
    * ssh aufruf
    * rsyncd stoppen

 - auf dem Ziel Server:
    * tmp dir anlegen
    * script per rsync holen
    * script ausführen
    * tmp dir löschen

