=head1 NAME

Provision::DSL::Manual::Extending - how to extend Provision::DSL

=head1 ENTITIES

Creating new entities can be very simple. In order to maintain the whole
system behind working you need to know a few things.

The basic principle of an entity is 
L<Idempotence|http://en.wikipedia.org/wiki/Idempotence>. In short, an entity
will be responsible for getting itself into a desired state. If an entity
alread is in this state, nothing will happen.

Three things will influence if and how an entity will operate:

=over

=item state

At a given time, an entity is in one of three states: C<missing>,
C<outdated> or C<current>. The state can get obtained by an entity itself,
a child of the entity or by an inspector made responsible for this task.

=item wanted

The C<wanted> flag contains either a boolean reflecting the wanted state
C<missing> or C<current> or in some rare cases a special word like a
version number.

=item need_privilege

Some operations require the installing user to be able to gain administrator
(root) privileges. Every entity knows if such a privilege is needed and keeps
track about this fact. If the user doing the install is not capable of
getting privileges, no installation will happen at all.

=item install

Installing an entity will bring it to the desired state unless already there.
Installation of an entity can get done by the entity itself, will be
assisted by all of its children or can get delegated to an installer which
can get established specially for this job.

=back

=head2 Common things among all entities

=over

=item name

When using the dsl to define a provisioning, an entity is created or 
referenced by a C<name> which is stored in the object's attribute "name".
However, most entities behave more natural if they use correctly named
attributes for their purposes. In order to still allow an easy creation of
entities using clde like C<<< Entity some_name => { ... } >>>. To allow
this mechanism to happen, you will need to define one attribute like this:

    # assuming that 'foo' is the attribute you like
    has foo => ( is => 'lazy' );
    sub _build_foo { $_[0]->name }

=item children

Many entities do more or less complicated jobs. By splitting the job into
smaller pieces, the entire code-base can be easier to understand and
maintain.

Additional parts will get delegated to the children of an entity. Technically,
a child is an entity of its own. It does its own decisions, keeps track
of its own state and may have children.

The state of children will influence the parent's state by forcing the
parent's state from C<current> to C<outdated> if a child is not in its
desired state.

=item optional inspector

If calculating the entity's state is either depending on a platform or
complicated, it can get delegated to an inspector.

=item optional installer

When doing the installation of an entity is depending on a platform or
is complicated, it can get delegated to an installer.

=back

=head2 Calculating state

Every Entity must be able to report its state. The state is represented by one
of three words: C<missing>, C<outdated> or C<current>.

If an entity class implements the C<inspect()> method, this method can
return one of the possible states or a false value. The returned value will
get added to the state if true.

If an inspector is present, it will also get asked by calling its C<inspect()>
method. Again, the returned value will get added to the overall state.

Next, every child will get asked if in desired state. Depending on the
child state, C<current> or C<outdated> will get added to the overall state.

Finally, if nothing yet has beed added to the state, the entitie's
C<default_state> attribute will get applied to the overall state.

If the main entity reports a C<missing> state, it will remain and can never
get improved by a role or other depending entity. Otherwise during the process
of state calculation, an entity, inspector or child may degrade a C<current>
entity to C<outdated> if any of them is not current.

=head2 Installing

depending on the entity's state and the content of the C<wanted> flag,
one of these 3 methods will get called.

=over

=item create

If the item is C<missing> and must get created from scratch, the C<create>
method is called.

=item change

If the item is C<outdated> and is wanted, the C<change> method is responsible
for "updating" the entity.

=item remove

if the item is not wanted, C<remove>'s job is to delete everything around
the entity.

=back

Depending on complexitiy or the platform, these methods may exist inside
the entity's class or delegated to an installer.

=head1 RESOURCES

### inherit from Provision::DSL::Source
### like entities, construct one attribute lazily from attribute 'name'
### implement _build_content which may die if content does not make sense

=head1 AUTHOR

Wolfgang Kinkeldei, E<lt>wolfgang@kinkeldei.deE<gt>

=head1 LICENSE

This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
