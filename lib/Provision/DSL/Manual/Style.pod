=head1 NAME

Provision::DSL::Manual::Style - Style and Patterns used

=head1 CLASSES

=head2 Everything has a name

Almost every class has an attribute C<name> which is mandatory. In order
to maintain meaningful names for attributes actually needed for a class
very often, a better-named identifying attribute is constructed like this:

    has foo => (
        is => 'lazy',
    );
    
    sub _build_foo { $_[0]->name }

This allows constructing classes without knowing the name of the identifying
attribute. For example a package can use an attribute different from a
directory or a service.

=head2 Easy construction

As the name attribute is an identifying attribute and copied to a more
meaningful one, every constructor can be used with a single scalar argument
(assuming there are no more mandatory attributes, of course).

    # instead of writing:
    my $object = SomeClass->new( { name => 'some name' } );
    
    # you can write:
    my $object = SomeClass->new('some name');

In order to be consistent with the syntax of the DSL, additional attributes
may be added in a similar way:

    my $object = SomeClass->new('name', { more attributes } );

=head1 TYPES

=head2 Type Constraints

All Type Constraints are defined in L<Provision::DSL::Types> and exported
into the importing namespace. When possible, the names are kept equal to 
the names, L<Moose::Util::TypeConstraints|Moose::Util::TypeConstraints> uses.

To fit into the concepts of L<Moo|Moo>, every type constraint looks like this:

    sub TypeName {
        return sub {
            ( some condition being true for the type )
                or croak "not a TypeName: $_[0]";
        };
    }

=head2 Coercions

Coercion names begin with 'to_' and are named like C<to_TypeName>. Their
implementation might look like this:

    sub to_TypeName {
        return sub {
            # convert $_[0] to TypeName and return a proper value
        };
    }

=head1 SOURCES

In order to keep the DSL simple and easy to read, sources have simple and
meaningful names. Coercions accept sources as values and return the source's
content.

    # this is valid in a Provision script:
    File 'path/to/file' => {
        content => Url('http://my.website.com/whatever),
    };
    
    # this happens behind:
    # this is valid in a Provision script:
    File 'path/to/file' => {
        content => Url('http://my.website.com/whatever)->content,
    };

=head1 INSPECTORS

Usually inspectors know the entity they are inspecting and can look into
the entity for getting the values they need.

    SomeEntity 'name' => {
        inspector => 'Whatever';
    };

If an inspector needs additional arguments, it may be added like:

    SomeEntity 'name' => {
        inspector => Whatever( more args here ),
    };


=head1 INSTALLERS

### TODO: write me

=head1 AUTHOR

Wolfgang Kinkeldei

=head1 LICENSE

This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.

=cut