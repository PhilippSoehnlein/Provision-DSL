package Provision::DSL::Manual;

=head1 NAME

Provision::DSL::Manual - How to use Provision::DSL

=head1 SYNOPSIS

fire a script

    $ provision.pl -c path/to/configuration_file

where a minimal configuration file might look like

    {
        name           => 'a descriptive name',
        provision_file => 'path/to/provisioning_script.pl',
        
        ssh => {
            hostname => 'your_server.domain.de',
            user     => 'websites',
        },
        
        resources => [
            {
                source      => 'root',
                destination => 'files/root',
                exclude     => ['cache'],
            },
        ],
    }

and your provisioning script could be

    #!/usr/bin/env perl
    use Provision::DSL;
    
    # set some defaults for definitions below
    Defaults {
        Dir  => { user => 'sites' },
        File => { user => 'sites' },
    };

    # install packages unless present
    Package 'build-essential';

    # ensures that a user is present with requested attributes
    User sites => {
        uid => 1200,
    };

    # get perlbrew running for user 'sites'
    Perlbrew sites => {
        wanted         => '5.14.2',
        install_cpanm  => 1,
    };

    # ensures a directory tree for your site is created and filled
    # tell our listeners if things have changed
    Dir '/path/to/site' => {
        mkdir    => [ qw(logs pid) ],
        contents => Resource('website'),
        tell     => 'website_changed',
    };

    # create a customized config file for whatever daemon
    File '/etc/whatever.conf' => {
        user     => 'root',
        contents => Template('etc/whatever.tt', { vars => { ... } }),
    };

    # maintain a service for running a http daemon
    Service 'mysite_http_daemon' => {
        ... params not yet defined, sorry
        listen => 'website_changed',
    };

=head1 DESCRIPTION

Provision::DSL is a simple domain specific language allowing to describe how a
combination of packages, files, directories and services should look like on a
*nix machine you like to control. The entities listed in a provisioning script
are evaluated in source order. Unless there are dependencies between
individual entities, each entity decides on its own if it must C<<< create()
>>>, C<<< change() >>> or C<<< remove() >>> itself.

Each entity has a C<wanted> attribute which defaults to a true boolean value
but may be set to some false value. Some types of entites directly use the
value for eg a version number to install.

Entities needing data of some kind may request such an information from
resources which are available at the moment of deployment. Think of resources
as a copy of certain directories and files from the repository of the project
you are deploying.

Every entity checks itself resulting in one of three states:

=over

=item missing

The entity is entirely missing. If creating the entity is C<wanted>, a method
named C<<< create() >>> will be called in order to create the entity from
scratch. An unwanted entity is left as it is.

=item outdated

The entity is present but not in the final state. Depending on the C<wanted>
flag, either the method C<<< change() >>> or C<<< remove() >>> is called to
get it into the wanted state.

=item current

The entity is in a fully created state. Like outdated above, depending on
the C<wanted> flag, either C<<< change() >>> or C<<< remove() >>> is called
to get it into the wanted state.

=back

Usually, entities are simply processed in source order without knowing
each other. If changes in one entity should influence another entity,
the originating entity could C<talk> a special word, a dependent entity
could C<listen> to. If en entity hears a word, is listens to, it will
change to the outdated state.

=head2 Types of entities

Currently the following types of entites are defined:

=over

=item Dir

=item Execute

=item File

=item Group

=item Package

=item Perlbrew

=item Rsync

=item User

=item Service

=back

For extending, please consult L<Provision::DSL::Manual::Extending>.

=head2 Parts of a Provision

In order to bring (and keep) a target machine to a stable state, the following
things are required:

=over

=item entity description

A list of entites listed in install order.

=item resources

optionally, a directory tree may contain files and directories for copying
to the destination machine. The files could contain configuration files,
templates or an entire web site.

=item config file

A config file describes which files and directories to include and the
destination machine to run the provision script on.

=back

=head2 Remote Execution

Provision::DSL is depending on a few CPAN modules only. Each of these
modules only has minimal dependencies, all modules are pure perl and
run starting from Perl 5.10.

All required modules, resources and the provision script are packed into a tar
file, the tar file is appended to a extraction script (base-64 encoded, into
the __DATA__ section, to be precise) and the combination of both is pasted to
the remote machine's Perl interpreter where it is unpacked into a temporary
directory and provisiond. The entire process only requires a single ssh
process to run. All other IO-Operations happen entirely on the target machine,
the ssh connection will compress its payload.

=cut

=head1 AUTHOR

Wolfgang Kinkeldei, E<lt>wolfgang@kinkeldei.deE<gt>

=head1 LICENSE

This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

1;
