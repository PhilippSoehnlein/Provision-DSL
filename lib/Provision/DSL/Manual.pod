package Provision::DSL::Manual;

=head1 NAME

Provision::DSL::Manual - How to use Provision::DSL

=head1 SYNOPSIS

fire a script

    $ provision.pl -c path/to/configuration_file.conf

where a minimal configuration file might look like

    {
        # a name used to distinguish generated files
        name => 'fileserver',
        
        # the fine running on the remote machine
        provision_file => 'path/to/provisioning_script.pl',
        
        # details of the ssh connection
        remote => {
            hostname => 'your_server.domain.de',
        },
        
        # files accessible via Resource(...) in provisioning-script
        resources => [
            {
                source      => 'root',
                destination => 'files/root',
                exclude     => ['cache'],
            },
        ],
    }

If you do not need resources, the provision file and remote hostname options
can also appear in the command line. Try `provision.pl -h` to see what the
possible options are.

and your provisioning script could be

    #!/usr/bin/env perl
    use Provision::DSL;
    
    # set some defaults for definitions below
    Defaults {
        Dir  => { user => 'sites' },
        File => { user => 'sites' },
    };

    # install packages unless present
    Package 'build-essential';

    # ensures that a user is present with requested attributes
    User sites => {
        uid => 1200,
    };

    # get perlbrew running for user 'sites'
    Perlbrew sites => {
        wanted         => '5.14.2',
        install_cpanm  => 1,
    };

    # ensures a directory tree for your site is created and filled
    # tell our listeners if things have changed
    Dir '/path/to/site' => {
        mkdir    => [ qw(logs pid) ],
        content  => Resource('website'),
        tell     => 'website_changed',
    };

    # create a customized config file for whatever daemon
    File '/etc/whatever.conf' => {
        user     => 'root',
        content  => Template('etc/whatever.tt', { vars => { ... } }),
    };

    # maintain a service for running a http daemon
    Service 'mysite_http_daemon' => {
        pid_file => '/var/run/mydaemon.pid',
        content  => Template('etc/mydaemon.tt', { vars => { ... } }),
    };
    
    Message 'This message is always printed';
    
    Note 'Only printed in verbose mode';
    
    Info 'Print if verbose level is higher';
    
    Done;

=head1 DESCRIPTION

Provision::DSL is a simple domain specific language allowing to describe how a
combination of packages, files, directories and services should look like on a
*nix machine you like to control.

The primary goal is to have a tool requiring a target machine with

=over

=item perl

At least Perl 5.8 must be available on the controlled machine. There is no
requirement on the modules installed. CORE is just enough.

=item ssh

A SSH daemon must run on the controlled machine and a login must be possible
somehow. The user on the controlled machine does not need to be root.

=item rsync

The rsync binary must be present and executable.

=item sudo

The sudo binary must be available. Eventually the user is prompted for a
password at his first connect in order to append a special line to the
F</etc/sudoers> file. After that, no more prompting will occur.

=back

The central part is a provisioning script which will run on the controlled
machine. Additionally there may exist a configuration file storing some
options for controlling the execution on local and remote side. Without a
configuration file, only a few options can be controlled on the command line.
This scenario is meant for simple cases.

The entities listed in a provisioning script are evaluated in source order.
Each entity decides on its own if it must C<<< create() >>>, C<<< change() >>>
or C<<< remove() >>> itself.

Each entity has a C<wanted> attribute which defaults to a true boolean value
if an installation is wanted but may be set to some false value when the
entity in question is requested to get removed. Some types of entites directly
use the value for eg a version number to install.

Entities needing data of some kind may request such an information from
resources which are available at the moment of deployment. Think of resources
as a copy of certain directories and files from the repository of the project
you are deploying.

Every entity checks itself resulting in one of three states:

=over

=item missing

The entity is entirely missing. If creating the entity is C<wanted>, a method
named C<<< create() >>> will be called in order to create the entity from
scratch. An unwanted entity is left as it is.

=item outdated

The entity is present but not in the final state. Depending on the C<wanted>
flag, either the method C<<< change() >>> or C<<< remove() >>> is called to
get it into the wanted state.

=item current

The entity is in a fully created state. Like outdated above, depending on
the C<wanted> flag, either C<<< change() >>> or C<<< remove() >>> is called
to get it into the wanted state.

=back

Additionally every entity observes if root-privileges are needed in order
to get the entity installed and verifies if the current user can easily
obtain root-privileges by prefixing a command by C<<<sudo -n>>>. If at least
one entity would need root-privileges but the user cannot provide this
capability, the entire provisioning will abort.

Usually, entities are simply processed in source order without knowing
each other. Every entity must act on its own without any reference to other
entities. This ensures, that a provisioning process can continue whatever
a point of interruption might be.


For a full list of the available options, please look at
L<Provision::DSL::Manual::DSL|Provision::DSL::Manual::DSL>.

For extending, please consult 
L<Provision::DSL::Manual::Extending|Provision::DSL::Manual::Extending>.

If you like to fully understand what happens on the remote side please read
L<Provision::DSL::Manual::Remote|Provision::DSL::Manual::Remote>.

The styles and patterns used are listed here:
L<Provision::DSL::Manual::Style|Provision::DSL::Manual::Style>.

=head2 Parts of a Provision

In order to bring (and keep) a target machine to a stable state, the following
things are required:

=over

=item entity description

A list of entites listed in install order.

=item resources

optionally, a directory tree may contain files and directories for copying
to the destination machine. The files could contain configuration files,
templates or an entire web site.

=item config file

A config file describes which files and directories to include and the
destination machine to run the provision script on.

=back

=head2 Remote Execution

Provision::DSL is depending on a few CPAN modules only. Each of these
modules only has minimal dependencies, all modules are pure perl and
run starting from Perl 5.8.

All required modules, resources and the provision script are packed into a
temporary directory. Using a locally running rsync daemon, all files are
transferred to the remote machine using the established ssh connection.

The process is explained in-depth in 
L<Provision::DSL::Manual::Remote|Provision::DSL::Manual::Remote>

=cut

=head1 AUTHOR

Wolfgang Kinkeldei, E<lt>wolfgang@kinkeldei.deE<gt>

=head1 LICENSE

This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

1;
